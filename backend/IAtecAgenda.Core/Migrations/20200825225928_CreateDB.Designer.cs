// <auto-generated />
using System;
using IAtecAgenda.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IAtecAgenda.Core.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20200825225928_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Configuracao", b =>
                {
                    b.Property<string>("Grupo")
                        .HasMaxLength(80);

                    b.Property<string>("Chave")
                        .HasMaxLength(80);

                    b.Property<string>("AlteradoPorId");

                    b.Property<string>("CriadoPorId")
                        .IsRequired();

                    b.Property<DateTime?>("DataAlteracao");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Parametros");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Valor");

                    b.HasKey("Grupo", "Chave");

                    b.HasIndex("AlteradoPorId");

                    b.HasIndex("CriadoPorId");

                    b.ToTable("Configuracao");

                    b.HasData(
                        new
                        {
                            Grupo = "identityServer",
                            Chave = "identityServer:configuration",
                            CriadoPorId = "00000000-0000-0000-0000-000000000000",
                            DataCadastro = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Parâmetros de configuração do serviço de autorização.",
                            Parametros = "<IdentityServerConfig xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.datacontract.org/2004/07/IAtecAgenda.Domain.Infrastructure\"><Authority>https://localhost:5001</Authority><Clients><IdentityServerClientConfig><AccessTokenLifetime>3600</AccessTokenLifetime><ClientId>frontend.app</ClientId><ClientSecret>agenda</ClientSecret></IdentityServerClientConfig></Clients></IdentityServerConfig>",
                            Tipo = "string"
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Evento", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao");

                    b.Property<string>("Local")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("False");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("TipoEvento")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.EventoParticipante", b =>
                {
                    b.Property<int>("EventoId");

                    b.Property<int>("ParticipanteId");

                    b.HasKey("EventoId", "ParticipanteId");

                    b.HasIndex("ParticipanteId");

                    b.ToTable("EventoParticipante");
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Modulo");
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Operacao", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.Property<int>("OperacaoGrupoId");

                    b.HasKey("Id");

                    b.HasIndex("OperacaoGrupoId");

                    b.ToTable("Operacao");

                    b.HasData(
                        new
                        {
                            Id = 90010000,
                            Nome = "TRATAMENTO MANUAL",
                            OperacaoGrupoId = 90000000
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.OperacaoGrupo", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.HasKey("Id");

                    b.ToTable("OperacaoGrupo");

                    b.HasData(
                        new
                        {
                            Id = 90000000,
                            Nome = "TRATAMENTO MANUAL"
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Participante", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Ativo");

                    b.Property<string>("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Participante");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = false,
                            Email = "participante1@email.com.br",
                            Nome = "Participante 1"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = false,
                            Email = "participante2@email.com.br",
                            Nome = "Participante 2"
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.PerfilModulo", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<int>("ModuloId");

                    b.HasKey("RoleId", "ModuloId");

                    b.HasIndex("ModuloId");

                    b.ToTable("PerfilModulo");
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusId");

                    b.Property<string>("Surname")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Email = "no-reply@email.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "ADMINISTRADOR",
                            NormalizedEmail = "NO-REPLY@EMAIL.COM.BR",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECHm/aaR3zSYyetFti7SpvwpQb64XvRKd9lKSGjWKZRy3KJlIz7srfbxTWrbpaabeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00000000-0000-0000-0000-000000000000",
                            StatusId = 2,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.UsuarioStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.HasKey("Id");

                    b.ToTable("AspNetUserStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Pendente"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Ativo"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Inativo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000000",
                            RoleId = "99999"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Perfil", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Perfil");

                    b.HasData(
                        new
                        {
                            Id = "10000",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "20000",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "99999",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Sistema",
                            NormalizedName = "SISTEMA"
                        });
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Configuracao", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario", "AlteradoPor")
                        .WithMany()
                        .HasForeignKey("AlteradoPorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario", "CriadoPor")
                        .WithMany()
                        .HasForeignKey("CriadoPorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.EventoParticipante", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Evento", "Evento")
                        .WithMany("EventosParticipante")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAtecAgenda.Domain.Entities.Participante", "Participante")
                        .WithMany("ParticipantesEvento")
                        .HasForeignKey("ParticipanteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Operacao", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.OperacaoGrupo", "OperacaoGrupo")
                        .WithMany("Operacoes")
                        .HasForeignKey("OperacaoGrupoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.PerfilModulo", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Modulo", "Modulo")
                        .WithMany("Perfis")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAtecAgenda.Domain.Entities.Perfil", "Perfil")
                        .WithMany("Modulos")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IAtecAgenda.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.UsuarioStatus", "Status")
                        .WithOne("Usuario")
                        .HasForeignKey("IAtecAgenda.Domain.Entities.Usuario", "StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IAtecAgenda.Domain.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
